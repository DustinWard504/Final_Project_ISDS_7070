{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project (part 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Women's E-Commerce Dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Import Libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import nltk\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import datasets, linear_model\n",
    "from sklearn.metrics import mean_squared_error, r2_score, accuracy_score\n",
    "\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.gaussian_process import GaussianProcessClassifier\n",
    "from sklearn.gaussian_process.kernels import RBF\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
    "from sklearn.linear_model import SGDClassifier, LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Change Column Names\n",
    "col_names = ['id' , 'Clothing_ID' , 'Age' , 'Title' , 'Review_Text' , 'Rating' , \n",
    "             'Recommended_IND' , 'Positive_Feedback_Count' , \n",
    "             'Division_Name' , 'Department_Name' , 'Class_Name']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Clothing_ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Title</th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Recommended_IND</th>\n",
       "      <th>Positive_Feedback_Count</th>\n",
       "      <th>Division_Name</th>\n",
       "      <th>Department_Name</th>\n",
       "      <th>Class_Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>767</td>\n",
       "      <td>33</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Absolutely wonderful - silky and sexy and comf...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Initmates</td>\n",
       "      <td>Intimate</td>\n",
       "      <td>Intimates</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1080</td>\n",
       "      <td>34</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Love this dress!  it's sooo pretty.  i happene...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1077</td>\n",
       "      <td>60</td>\n",
       "      <td>Some major design flaws</td>\n",
       "      <td>I had such high hopes for this dress and reall...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1049</td>\n",
       "      <td>50</td>\n",
       "      <td>My favorite buy!</td>\n",
       "      <td>I love, love, love this jumpsuit. it's fun, fl...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>General Petite</td>\n",
       "      <td>Bottoms</td>\n",
       "      <td>Pants</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>847</td>\n",
       "      <td>47</td>\n",
       "      <td>Flattering shirt</td>\n",
       "      <td>This shirt is very flattering to all due to th...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>General</td>\n",
       "      <td>Tops</td>\n",
       "      <td>Blouses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>1080</td>\n",
       "      <td>49</td>\n",
       "      <td>Not for the very petite</td>\n",
       "      <td>I love tracy reese dresses, but this one is no...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>858</td>\n",
       "      <td>39</td>\n",
       "      <td>Cagrcoal shimmer fun</td>\n",
       "      <td>I aded this in my basket at hte last mintue to...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>General Petite</td>\n",
       "      <td>Tops</td>\n",
       "      <td>Knits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>858</td>\n",
       "      <td>39</td>\n",
       "      <td>Shimmer, surprisingly goes with lots</td>\n",
       "      <td>I ordered this in carbon for store pick up, an...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>General Petite</td>\n",
       "      <td>Tops</td>\n",
       "      <td>Knits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>1077</td>\n",
       "      <td>24</td>\n",
       "      <td>Flattering</td>\n",
       "      <td>I love this dress. i usually get an xs but it ...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>1077</td>\n",
       "      <td>34</td>\n",
       "      <td>Such a fun dress!</td>\n",
       "      <td>I'm 5\"5' and 125 lbs. i ordered the s petite t...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Clothing_ID  Age                                 Title  \\\n",
       "0   0          767   33                                   NaN   \n",
       "1   1         1080   34                                   NaN   \n",
       "2   2         1077   60               Some major design flaws   \n",
       "3   3         1049   50                      My favorite buy!   \n",
       "4   4          847   47                      Flattering shirt   \n",
       "5   5         1080   49               Not for the very petite   \n",
       "6   6          858   39                  Cagrcoal shimmer fun   \n",
       "7   7          858   39  Shimmer, surprisingly goes with lots   \n",
       "8   8         1077   24                            Flattering   \n",
       "9   9         1077   34                     Such a fun dress!   \n",
       "\n",
       "                                         Review_Text  Rating  Recommended_IND  \\\n",
       "0  Absolutely wonderful - silky and sexy and comf...       4                1   \n",
       "1  Love this dress!  it's sooo pretty.  i happene...       5                1   \n",
       "2  I had such high hopes for this dress and reall...       3                0   \n",
       "3  I love, love, love this jumpsuit. it's fun, fl...       5                1   \n",
       "4  This shirt is very flattering to all due to th...       5                1   \n",
       "5  I love tracy reese dresses, but this one is no...       2                0   \n",
       "6  I aded this in my basket at hte last mintue to...       5                1   \n",
       "7  I ordered this in carbon for store pick up, an...       4                1   \n",
       "8  I love this dress. i usually get an xs but it ...       5                1   \n",
       "9  I'm 5\"5' and 125 lbs. i ordered the s petite t...       5                1   \n",
       "\n",
       "   Positive_Feedback_Count   Division_Name Department_Name Class_Name  \n",
       "0                        0       Initmates        Intimate  Intimates  \n",
       "1                        4         General         Dresses    Dresses  \n",
       "2                        0         General         Dresses    Dresses  \n",
       "3                        0  General Petite         Bottoms      Pants  \n",
       "4                        6         General            Tops    Blouses  \n",
       "5                        4         General         Dresses    Dresses  \n",
       "6                        1  General Petite            Tops      Knits  \n",
       "7                        4  General Petite            Tops      Knits  \n",
       "8                        0         General         Dresses    Dresses  \n",
       "9                        0         General         Dresses    Dresses  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Load the first 10 rows of the Women's Clothing Ecommerce Review dataset\n",
    "df = pd.read_csv('https://657efe09-c273-4ba6-932d-675fbcfb793f.filesusr.com/ugd/2b6409_e6921b20df3b482a8ab7da2bd1821482.csv?dn=Womens_Clothing_ECommerce_Reviews.csv',\n",
    "                 sep='\\t' , delimiter = ';' , skiprows = 1 ,  names = col_names )\n",
    "\n",
    "df.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Delete the row 'id' from 'df' dataframe and create new dataframe called 'df_clean'\n",
    "df_clean = df.drop(columns=\"id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Clothing_ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Title</th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Recommended_IND</th>\n",
       "      <th>Positive_Feedback_Count</th>\n",
       "      <th>Division_Name</th>\n",
       "      <th>Department_Name</th>\n",
       "      <th>Class_Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>767</td>\n",
       "      <td>33</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Absolutely wonderful - silky and sexy and comf...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Initmates</td>\n",
       "      <td>Intimate</td>\n",
       "      <td>Intimates</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1080</td>\n",
       "      <td>34</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Love this dress!  it's sooo pretty.  i happene...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1077</td>\n",
       "      <td>60</td>\n",
       "      <td>Some major design flaws</td>\n",
       "      <td>I had such high hopes for this dress and reall...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1049</td>\n",
       "      <td>50</td>\n",
       "      <td>My favorite buy!</td>\n",
       "      <td>I love, love, love this jumpsuit. it's fun, fl...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>General Petite</td>\n",
       "      <td>Bottoms</td>\n",
       "      <td>Pants</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>847</td>\n",
       "      <td>47</td>\n",
       "      <td>Flattering shirt</td>\n",
       "      <td>This shirt is very flattering to all due to th...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>General</td>\n",
       "      <td>Tops</td>\n",
       "      <td>Blouses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1080</td>\n",
       "      <td>49</td>\n",
       "      <td>Not for the very petite</td>\n",
       "      <td>I love tracy reese dresses, but this one is no...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>858</td>\n",
       "      <td>39</td>\n",
       "      <td>Cagrcoal shimmer fun</td>\n",
       "      <td>I aded this in my basket at hte last mintue to...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>General Petite</td>\n",
       "      <td>Tops</td>\n",
       "      <td>Knits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>858</td>\n",
       "      <td>39</td>\n",
       "      <td>Shimmer, surprisingly goes with lots</td>\n",
       "      <td>I ordered this in carbon for store pick up, an...</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>General Petite</td>\n",
       "      <td>Tops</td>\n",
       "      <td>Knits</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1077</td>\n",
       "      <td>24</td>\n",
       "      <td>Flattering</td>\n",
       "      <td>I love this dress. i usually get an xs but it ...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1077</td>\n",
       "      <td>34</td>\n",
       "      <td>Such a fun dress!</td>\n",
       "      <td>I'm 5\"5' and 125 lbs. i ordered the s petite t...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>General</td>\n",
       "      <td>Dresses</td>\n",
       "      <td>Dresses</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Clothing_ID  Age                                 Title  \\\n",
       "0          767   33                                   NaN   \n",
       "1         1080   34                                   NaN   \n",
       "2         1077   60               Some major design flaws   \n",
       "3         1049   50                      My favorite buy!   \n",
       "4          847   47                      Flattering shirt   \n",
       "5         1080   49               Not for the very petite   \n",
       "6          858   39                  Cagrcoal shimmer fun   \n",
       "7          858   39  Shimmer, surprisingly goes with lots   \n",
       "8         1077   24                            Flattering   \n",
       "9         1077   34                     Such a fun dress!   \n",
       "\n",
       "                                         Review_Text  Rating  Recommended_IND  \\\n",
       "0  Absolutely wonderful - silky and sexy and comf...       4                1   \n",
       "1  Love this dress!  it's sooo pretty.  i happene...       5                1   \n",
       "2  I had such high hopes for this dress and reall...       3                0   \n",
       "3  I love, love, love this jumpsuit. it's fun, fl...       5                1   \n",
       "4  This shirt is very flattering to all due to th...       5                1   \n",
       "5  I love tracy reese dresses, but this one is no...       2                0   \n",
       "6  I aded this in my basket at hte last mintue to...       5                1   \n",
       "7  I ordered this in carbon for store pick up, an...       4                1   \n",
       "8  I love this dress. i usually get an xs but it ...       5                1   \n",
       "9  I'm 5\"5' and 125 lbs. i ordered the s petite t...       5                1   \n",
       "\n",
       "   Positive_Feedback_Count   Division_Name Department_Name Class_Name  \n",
       "0                        0       Initmates        Intimate  Intimates  \n",
       "1                        4         General         Dresses    Dresses  \n",
       "2                        0         General         Dresses    Dresses  \n",
       "3                        0  General Petite         Bottoms      Pants  \n",
       "4                        6         General            Tops    Blouses  \n",
       "5                        4         General         Dresses    Dresses  \n",
       "6                        1  General Petite            Tops      Knits  \n",
       "7                        4  General Petite            Tops      Knits  \n",
       "8                        0         General         Dresses    Dresses  \n",
       "9                        0         General         Dresses    Dresses  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 23486 entries, 0 to 23485\n",
      "Data columns (total 10 columns):\n",
      " #   Column                   Non-Null Count  Dtype \n",
      "---  ------                   --------------  ----- \n",
      " 0   Clothing_ID              23486 non-null  int64 \n",
      " 1   Age                      23486 non-null  int64 \n",
      " 2   Title                    19676 non-null  object\n",
      " 3   Review_Text              22641 non-null  object\n",
      " 4   Rating                   23486 non-null  int64 \n",
      " 5   Recommended_IND          23486 non-null  int64 \n",
      " 6   Positive_Feedback_Count  23486 non-null  int64 \n",
      " 7   Division_Name            23472 non-null  object\n",
      " 8   Department_Name          23472 non-null  object\n",
      " 9   Class_Name               23472 non-null  object\n",
      "dtypes: int64(5), object(5)\n",
      "memory usage: 1.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df_clean.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(23486, 10)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Checking for the number of rows and columns\n",
    "df_clean.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Checking for duplicate values\n",
    "df_clean.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Clothing_ID                   0\n",
       "Age                           0\n",
       "Title                      3810\n",
       "Review_Text                 845\n",
       "Rating                        0\n",
       "Recommended_IND               0\n",
       "Positive_Feedback_Count       0\n",
       "Division_Name                14\n",
       "Department_Name              14\n",
       "Class_Name                   14\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for null values\n",
    "df_clean.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping the null values\n",
    "df_clean=df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19662, 11)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#confirming null values are dropped\n",
    "df_clean.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Pie Chart (% of each rating)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Created a piechart that shows the percent of each rating count\n",
    "import matplotlib.pyplot as plt\n",
    "# Pie chart\n",
    "labels = ['5', '4','3','2','1']\n",
    "sizes = df_clean['Rating'].value_counts()\n",
    "#colors\n",
    "colors = ['navy','#66b3ff','#5F9EA0','#99ff99','#B0E0E6']\n",
    "#explsion\n",
    "explode = (0.05,0.05,0.05,0.05, 0.05)\n",
    " \n",
    "plt.pie(sizes, colors = colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)\n",
    "#draw circle\n",
    "centre_circle = plt.Circle((0,0),0.70,fc='white')\n",
    "fig = plt.gcf()\n",
    "fig.gca().add_artist(centre_circle)\n",
    "#Adjusts chart size\n",
    "sns.set(rc={'figure.figsize':(16, 8)})\n",
    "plt.title('Piechart of Ratings Count') \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA7sAAAHwCAYAAABnmnhwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAA13klEQVR4nO39fZSU9Z3n/78augEN5gbTLRy+xjHqShYn6tFNQtRGcwOt2KItsyKOCGp2JAY3JmsGkZHBaLw5rGxMBiYmjvE2RhkBwzCtE5loFGMIk2ic4JoxgApO0yAKqDR9U78/8rNXvEGMNFVcPh7neLCuuqr6Xdenq+FJXVVUlUqlUgAAAKBAepV7AAAAANjZxC4AAACFI3YBAAAoHLELAABA4YhdAAAACkfsAgAAUDhiF4DdxnPPPZdPfOITGT16dEaPHp3Gxsb8xV/8RZYtW7bTvsaUKVNyww03vKf72LRpU8aPH/+ub3f33Xfn2GOPzTnnnPOW11911VU55JBD8p//+Z/vab63cvDBB6exsTGjR4/OSSedlKamptx2223d1//oRz/K9ddfv937uOuuu7a5zeu9/vaf+9zn8tvf/vZdzffss89m8uTJSZKWlpaMHTv2Xd0egPef6nIPAADvRr9+/bJgwYLuy4sWLcrFF1+c++67r4xTbeull1561zGXJPPnz8+FF16Y0aNHv+m6tra2zJ8/PyNHjsytt96a//W//tfOGHUbN910UwYMGJAkeeGFF3Leeeelra0tZ599dk4//fR3vP2yZcty0EEHveV1O3L77VmzZk1WrFiRJNlnn31yxx13vKf7A6D4xC4Au7UXX3wxtbW1SZKurq5861vfymOPPZaXX345pVIpl19+eY444ohMmTIlL774Yp599tkce+yx+fKXv5zLL788//Zv/5bevXvnC1/4Qi688MIkya9//euMHTs269aty0EHHZT//b//d/bcc8/MnTs3P/7xj9Pe3p6XXnopX/rSlzJu3LjcfffdmTt3bl599dX0798/SbJly5aMHj06d999d3r37t0976ZNmzJjxow8+eSTqaqqyjHHHJOvfe1rueaaa/Lb3/42zz33XDZs2JAJEyZs8zj/6Z/+KR/72McyYcKEnHPOOTn//POzxx57JEkef/zx/O3f/m3a29vzsY99LGvWrMmUKVPy6U9/OosXL86cOXPS3t6efv365a//+q9z+OGHv+NxHTBgQKZMmZILLrggEydOzHe/+91s2LAhl156aW6//fbccccdqampSd++fXPZZZdlxYoVWbx4cR5++OH069cvL7zwQn7zm99k7dq1Ofjgg7Pffvt13z5Jbr/99jz55JPZunVrJk6cmDFjxuTRRx/NN7/5zSxcuDBJui8vWLAg06ZNS0tLS84555zMmDEjjY2N+fWvf5329vZcddVVeeSRR9K7d+988pOfzMUXX5z+/fvnc5/7XE455ZQ88sgjef755zN69Oh89atffU/fbwDsPsQuALuV1yIySTZu3JjW1tb83d/9XZLksccey9q1a/PjH/84vXr1yvXXX5/vf//7OeKII7pv+0//9E9JkiuvvDJtbW1ZtGhROjs7c/bZZ+eXv/xlkj+eJnvzzTenT58++Yu/+Ivcd999+eIXv5i77ror119/fT7ykY/kN7/5TSZOnJhx48YlSf7jP/4jixcvTv/+/fPcc8+lsbFxm1egX3P55Zfnwx/+cH7yk5+kvb09kyZNyj/8wz9k6tSpWb58ec4444w0NDS86Xa33357Tj755Pz5n/95amtrM2/evIwbNy4dHR2ZPHlyLrvssgwfPjy/+MUvukN55cqVmTVrVm6++eZ85CMfye9///tMnDgx9913X/bcc893PNZDhgxJa2trNmzY0L2ts7Mz3/rWt7J48eLU1dVl/vz5WbZsWU477bTcf//9Oeigg3LGGWfkO9/5TlavXp2FCxemuro63/nOd7a57759+2bevHlpaWnJKaeckkMPPfRt5+jdu3cuv/zyfPOb38wNN9yQ5557rvu6OXPmZO3atVmwYEF69+6dSy65JNdcc00uu+yyJMkrr7yS22+/PS0tLfniF7+YU089Nfvuu+87PnYAdn9iF4DdyhtPY16yZEnOP//83HPPPTn88MPzoQ99KHfccUeeffbZPProo/nABz7Qve9r0fva7S6++OL07t07vXv3zq233pokmTdvXr7whS90v2p60EEH5YUXXsgHPvCB/P3f/30eeOCBrFy5Mk8++WReeeWV7vs7+OCDu1/V3Z4HH3wwP/rRj1JVVZU+ffpk7Nixuemmm/I//sf/eNvb/Pu//3uefPLJjBo1Kkly8skn5+abb87pp5+ep556KkkyfPjwJMlnPvOZ7lOJH3744axdu3abV4mrqqryzDPPZMiQIe84a1VVVZI/hulrevfunYaGhowdOzbHHntsjj766O6v/UaHHXZYqqvf+o8ar73ndp999slRRx2VRx55JAcffPA7zvRGDz74YC688MLU1NQkSc4888ycf/753dd//vOf7/46e++9d1566SWxC/A+IXYB2K199rOfzcc+9rH89re/zdNPP50rrrgiEydOzOc///l8/OMfzz333NO97+tfzayuru6OuSR5/vnn069fv+7rXlNVVZVSqZT//M//zGmnnZb//t//e4444og0NDTkX//1X9/yvrenq6trm6/b1dWVjo6O7d7mtttuS3V1dU499dQkSUdHR9auXZsHH3wwAwcOTKlU2mb/106b7urqyrBhw/J//s//2eZx1tXV7dCsv/3tb/P//X//3zZ/YZAkM2fOzFNPPZUlS5bk+uuvz4IFC/Ltb3/7Tbff3jHp1ev/fUZmV1dX93q8/rG0t7e/44xvdTxff7vXh/ob7x+AYvNpzADs1lasWJHVq1fnE5/4RB5++OEcd9xxGTduXA455JD89Kc/TWdn51vebtiwYZk3b166urqydevWXHDBBVm6dOnbfp0nnngiAwYMyJe//OUcffTR3aH7VvdfXV2dzs7Otwyro48+OrfeemtKpVK2bt2aO++8M5/97Gff9utu3LgxixYtyt///d9n8eLFWbx4cR588MGcdNJJuemmm3LAAQekT58+efDBB5P88f27Tz31VKqqqjJs2LA8/PDDefrpp5MkDzzwQE466aRs2bLl7Q/o/19LS0tmzpyZs88+e5vtL7zwQoYPH54Pf/jDmTBhQr761a92fxhX79693zHcXzNv3rwkf/zgqUceeSTDhg3LgAEDsmbNmqxfvz6lUqn7lPPX7vut4veYY47Jj370o7S3t6erqyu33XZbjjrqqB2aAYBi88ouALuV179nN/njK3mXXXZZ9t9//4wdOzZf//rX09jYmI6Ojhx11FG577770tXV9ab7+cpXvpIrrrgio0ePTmdnZ0444YSMGDEiixcvfsuve9RRR2Xu3LlpaGhIVVVVPvWpT2XAgAFZtWrVm/atra3NJz/5yYwaNSq33XZbPvKRj3RfN23atFx++eVpbGxMe3t7jjnmmJx33nlv+3jnzZuXAw44IJ/5zGe22T5p0qSMGjUqf/jDH/Kd73wn06dPz7XXXps/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K/eo7xuPPvpoaezYsaX29vbSq6++WjruuONKy5cvtyYVYMmSJaVPf/rTpb/+678uvfrqq9akzLq6ukpHH310qb29vXubdSmvZ555pnT00UeXnn/++dLWrVtLp59+eulnP/uZNakQTz31VOmLX/xiac2aNdakzF555ZXSf/tv/620fv36Unt7e2nMmDGl+++/37qU0cMPP1w68cQTS5s2bSp1dHSU/uqv/qq0YMECa1IGv/nNb0onnnhiaejQoaVnn312u7+3jxo1qvTrX/+6VCqVShdffHHptttu2yUzemV3N1FbW5spU6akT58+qampyQEHHJCVK1dmv/32y7777pvq6uo0Njamubm53KO+b3zqU5/KzTffnOrq6qxfvz6dnZ3ZuHGjNSmzF198MbNmzcp5552XJHn88cetSZn94Q9/SJKcffbZOemkk3LrrbdalzL7l3/5l5xwwgkZOHBgampqMmvWrOyxxx7WpEL87d/+bS688MI8++yz1qTMOjs709XVlVdffTUdHR3p6OhI//79rUsZ/e53v8vRRx+d/v37p3fv3jnmmGNy1113WZMyuPPOOzN9+vTU1dUlefs/c61evTpbtmzJYYcdliRpamraZesjdncTBx10UPc3yMqVK/PP//zPqaqqSm1tbfc+dXV1aWlpKdOE7081NTW57rrrMmrUqAwbNixr1661JmV26aWX5sILL8wHP/jBJLEmFWDjxo0ZNmxY/u7v/i4//OEPc8cdd2TNmjXWpYxWrVqVzs7OnHfeeRk9enRuv/12z5UKsWTJkmzZsiXHH3+8NakA/fv3z//8n/8zxx9/fIYPH57BgwdblzIbOnRoHnroobz44otpa2vL4sWL82//9m/WpAyuuOKKHHnkkd2X3+658cbttbW1u2x9xO5u5ve//33OPvvsfOMb38i+++6bqqqq7utKpdI2l9k1LrjggjzyyCN5/vnns3LlSmtSRnfddVcGDRqUYcOGdW/r6uqyJmV2+OGH55prrslee+2VAQMGZMyYMbnuuuusSxl1dnbmkUceybe+9a38+Mc/zuOPP55nn33WmlSAO+64IxMnTkzi51clePLJJ/OP//iP+dd//df8/Oc/T69evfxeX2bDhg1LU1NTzjzzzJx77rk54ogj0tHRYU0qwNv9zCrnz7LqXfJV2CmWLVuWCy64IFOnTs2oUaPyy1/+Mq2trd3Xt7a2dp9GQM97+umns3Xr1nziE5/IHnvskREjRqS5uTm9e/fu3sea7FqLFi1Ka2trRo8enZdeeimvvPJKVq9ebU3K7Fe/+lXa29u7/xKiVCpl8ODBfn6V0Uc/+tEMGzYsAwYMSJJ84Qtf8POrAmzdujVLly7NVVddlSQZOHCg50mZPfTQQxk2bFj23nvvJH88/fKGG27wXCmjzZs3Z8SIEd1/KfSDH/wgn/rUpzxXKsDb/cx64/Z169btsvXxyu5u4vnnn8/555+fmTNnZtSoUUmSQw89NCtWrOg+HW3hwoWpr68v86TvH88991ymTZuWrVu3ZuvWrbn//vszduxYa1JGN954YxYuXJgFCxbkggsuyOc+97n84Ac/sCZltmnTplxzzTVpa2vL5s2bM2/evHzta1+zLmV03HHH5aGHHsrGjRvT2dmZn//852loaLAmZfZ//+//zZ/92Z9lzz33TOL3+UowZMiQLFmyJK+88kpKpVIWL15sXcrsueeey5e//OV0dHRk06ZNmTt3br761a9akwrwds+NwYMHp2/fvlm2bFmSP37C+a5aH6/s7iZuuOGGtLW1df9tb5KMHTs2V111VSZPnpy2trYMHz48DQ0NZZzy/WX48OF5/PHHc/LJJ6d3794ZMWJERo0alQEDBliTCtK3b1/PkzI77rjj8thjj+Xkk09OV1dXxo0bl8MPP9y6lNGhhx6ac889N+PGjUt7e3uOOuqonH766fn4xz9uTcro2WefzcCBA7sv+/lVfkcffXR+97vfpampKTU1NfnzP//zTJ48OUcddZR1KZMhQ4ZkxIgROemkk9LZ2ZkJEybkiCOO8FypANv7mTVz5sxMmzYtmzdvztChQzN+/PhdMlNVqVQq7ZKvBAAAALuI05gBAAAoHLELAABA4YhdAAAACkfsAgAAUDhiFwAAgMIRuwAAABSO2AUAAKBwqss9AADwzrq6uvKtb30rjz32WF5++eWUSqVcfvnl2X///XPxxRfnmWeeyYc//OHU1tbmoIMOyuTJk/P000/niiuuyIsvvpjOzs6ceeaZGTNmTLkfCgDsEmIXAHYDjz32WNauXZsf//jH6dWrV66//vp8//vfz5577pkDDzww3/ve97J27do0NTXloIMOSkdHRy644IJcc801GTp0aDZt2pTTTjstBx54YA477LByPxwA6HFiFwB2A4cffng+9KEP5Y477sizzz6bRx99NB/4wAeydOnSzJs3L0lSV1eXhoaGJMnKlSvzzDPPZOrUqd33sWXLlvzud78TuwC8L4hdANgN/OxnP8sVV1yRiRMn5vOf/3w+/vGP55577kl1dXVKpVL3fr16/fHjODo7O7PXXntlwYIF3detW7cue+211y6fHQDKwQdUAcBu4OGHH85xxx2XcePG5ZBDDslPf/rTdHZ2Zvjw4Zk7d26SZMOGDfnpT3+aqqqq7L///unXr1937D7//PM58cQT88QTT5TzYQDALlNVev1fBwMAFenpp5/O17/+9XR2dqajoyNHHXVU7rvvvixYsCDTpk3r/oCqUqmUY489Nueee26efPLJ7g+o6ujoyPjx43P66aeX+6EAwC4hdgFgN3bbbbflv/7X/5rDDz88W7duzbhx4zJ58uQMHz683KMBQFl5zy4A7MYOPPDAfPOb30xXV1fa29vT0NAgdAEgXtkFAACggHxAFQAAAIUjdgEAACgcsQsAAEDhiF0AAAAKR+wCAABQOP8/QkZ8NiNOAZYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Bar Chart of Age distribution\n",
    "import matplotlib.pyplot as plt\n",
    "# Pie chart\n",
    "# labels = data['Age'].value_counts().values\n",
    "sizes = df['Age']\n",
    "bins  = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n",
    "\n",
    "\n",
    "\n",
    " \n",
    "\n",
    "plt.hist(sizes,  histtype='bar', rwidth=0.9, color='#5F9EA0')\n",
    "\n",
    "plt.xlabel('age')\n",
    "plt.ylabel('count')\n",
    "plt.title('Barchart of Age Distribution') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Count plot of Recommended_IND\n",
    "Recommended_IND_Count = sns.countplot(x='Recommended_IND',data=df_clean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Recommended_IND\n",
       "0    0.181823\n",
       "1    0.818177\n",
       "Name: Age, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### 0 = no recommendation and 1 = recommendation\n",
    "df_clean.groupby(['Recommended_IND']).count().Age/len(df_clean['Recommended_IND'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# department name vs reviews\n",
    "ax=sns.countplot(x='Department_Name', data=df ,palette=\"GnBu_d\", order = df['Department_Name'].value_counts().index)\n",
    "ax.set_title(\"Reviews per Department\", fontsize=14)\n",
    "ax.set_ylabel(\"# of Reviews\", fontsize=12)\n",
    "ax.set_xlabel(\"Department\", fontsize=12)\n",
    "x=df['Department_Name'].value_counts()\n",
    "rects = ax.patches\n",
    "labels = x.values\n",
    "for rect, label in zip(rects, labels):\n",
    "    height = rect.get_height()\n",
    "    ax.text(rect.get_x() + rect.get_width()/2, height + 5, label, ha='center', va='bottom')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1584x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Reviews per Class\n",
    "plt.figure(figsize= (22,10  ))\n",
    "ax=sns.countplot(x='Class_Name', data=df ,palette=\"GnBu_d\", order = df['Class_Name'].value_counts().index)\n",
    "ax.set_title(\"Reviews per Class\", fontsize=14)\n",
    "ax.set_ylabel(\"# of Reviews\", fontsize=12)\n",
    "ax.set_xlabel(\"Class\", fontsize=12)\n",
    "x=df['Class_Name'].value_counts()\n",
    "rects = ax.patches\n",
    "labels = x.values\n",
    "for rect, label in zip(rects, labels):\n",
    "    height = rect.get_height()\n",
    "    ax.text(rect.get_x() + rect.get_width()/2, height + 5, label, ha='center', va='bottom')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 1.0, 'Ratings per department'),\n",
       " Text(0, 0.5, 'rating count'),\n",
       " Text(0.5, 0, ' Department_Name')]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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VG5urtxut1588UXNnDmzwJ4efPBBLVmyRG63W2fOnNG6deskSYGBgWrYsKEWLlwoSTp79qx69erlef3UqVP64osvJEnr16+Xn5+fatWqddn367eu9v2TpAceeEBLlixRZmamJGn27NkaPXp0gctdy7oAACUDR3YBACXGiy++qE6dOmnjxo0aOnSopk+frtmzZ8vPz0+NGzfW4cOHJUlhYWGaNm3aFddt1qyZHn30UT322GNyOp2qWbOm56jpqFGjNGXKFL366quy2Wx65plndOutt15Uo1KlSnr11Vd19OhRBQUFafr06ZKkP//5z3rllVfUtWtXuVwu3XnnnYqJiSmwp2HDhmn8+PFq3769goKCVKtWLc9r8fHxmjx5siIjI5Wbm6uOHTuqU6dOSkpKksPh0IoVKxQfHy+n06l58+bJ19f3su/Xb13t+ydJPXr0UHJysh599FHZbDZVqVLlimo8/PDDio6O1oQJE/TAAw9c1ToBANZmM4wDAgDgunz33Xf69ttv1b9/f0nSwoULtWPHDr366qtXtPzWrVs1efJkrVq1yotdFiwpKUmRkZH69ttvi7UPAAAKA0d2AQC4Trfffrv+9re/afHixZ6jkpMnTy7utgAAKNE4sgsAAAAAsBwuUAUAAAAAsByvht3169crKipK7du310svvSRJ2rRpkyIjI9W2bVvNmjXLM+8vV6ps166dxo0b57my4rFjx9SnTx9FRERoyJAhysrK8mbLAAAAAAAL8FrYPXLkiMaPH6/58+dr5cqV+uGHH7RhwwaNHTtW8+fPV0JCgnbt2qUNGzZIkqKjoxUXF6c1a9bIGKPFixdLkiZOnKjevXsrMTFR9erV0/z5873VMgAAAADAIrx2gapPP/1UjzzyiEJDQyVJs2bN0qFDh1S9enVVq1ZNkhQZGanExETVqFFD2dnZatiwoSQpKipKc+bMUY8ePbRt2zbNmzfPM71v376Kjo6+4j7S07PkdnNaMgAAAABYiY+PTRUqlL7k614Lu4cOHZKfn58GDx6s48ePq2XLlqpZs6aCg4M984SEhCg5OVkpKSkXTA8ODlZycrLS09MVGBgou91+wfSrcbmNBwAAAABYk9fCrsvl0jfffKNFixapVKlSGjJkiJxOp2w2m2ceY4xsNpvcbvfvTv/lz1/77fOCpKVlcmQXAAAAACzGx8emihUD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v369tmzZooyMDL333nuSpFtuuUWPPPKIYmNjtXfvXtlsNj3xxBPq0qWLli1bps8//1ynT59WSkqKevbsqaNHj2rLli0qX768/v73vysvL08jR470jFIYOnSo2rRpU5xvBYrQgQMHFBcXp9OnT6tUqVIaN26c6tevr5iYGDkcDn333XfKysrSkCFD1KVLF/ZB0Ndff61Zs2YpOztbZ8+e1QsvvKCHHnpIR48e1QsvvKBTp07J6XTqpZdeUmBgoGe5NWvWaN68eXrrrbfkdrsv+o6rV6+e5syZo3PnzmnBggVq1arVRd+Zf/jDH4pvw1HkWrdurfr162v37t169913tXHjRr399ttyu92qW7euxo8fL4fDoQceeEDt2rXT9u3b5evrq1dffVXVqlXTl19+qalTp8rhcOj2228v7s25MRnctGrVqmWMMWbLli2mYcOG5vjx48blcplu3bqZdevWXTDPrx/PmTPHREVFmby8PLN161ZTp04ds2/fPpOXl2cefvhhs3v3bvP111+bCRMmGGOMcblcpm/fviYxMfGCOmlpaaZTp07m9OnTxhhj/vWvf5mxY8cWzcaj0B05csS0atXqoundunUzq1evNvfcc485e/asMcaYGTNmmLffftsYY0xGRobp0KGDOXz4sImJiTEJCQnGGGOWLVtmPvzwQ7N161bz1FNPGWOMOXHihImOjjbGGDN8+HCzdu1aY4wxycnJpk2bNiYjI8P07dvX7NixwxhjzBtvvGE2btzo3Q2H1/yyb+rUqZPp2LGjqV+/vhkzZozJyckxrVq18vx/TkhIMFFRUcYYY8aMGWOWLl1qjPl5XzVnzhxjjDGvvPKKmTx5sjHm531P69atze7du83SpUtNy5YtTUZGhklKSjK1atUyX3zxhTHGmL59+5pPP/3ULFu2zLM/++GHH8y0adOK9H1A0fv1/qxbt25mzZo1xhhjvv32W9OyZUuTk5NjxowZYwYOHGhyc3PN8ePHTbNmzUxKSgr7oBJs6dKlZsyYMWbYsGHmv//9rzHGmE2bNpmOHTsaY4x56qmnzDvvvGOMMebzzz83zz77rOeztnHjRhMZGWlSU1ONMZf+jvtlHcaY3/3OhLX99rdWq1atPN95P/74o+nVq5fJzs42xhgTHx9v5s2bZ4z5+bf3p59+aowxZurUqWbq1KkmJyfHtGjRwvNZ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\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# investigating the relationship between department name and ratings\n",
    "ratings= sns.countplot('Department_Name',palette=\"GnBu_d\", hue = 'Rating', data = df)\n",
    "ratings.set(title = \"Ratings per department\",\n",
    "            ylabel =  'rating count',\n",
    "        xlabel = \" Department_Name\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>I had such high hopes for this dress and reall...</td>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>I love, love, love this jumpsuit. it's fun, fl...</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>This shirt is very flattering to all due to th...</td>\n",
       "      <td>5</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>I love tracy reese dresses, but this one is no...</td>\n",
       "      <td>2</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>I aded this in my basket at hte last mintue to...</td>\n",
       "      <td>5</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Review_Text  Rating  Age\n",
       "2  I had such high hopes for this dress and reall...       3   60\n",
       "3  I love, love, love this jumpsuit. it's fun, fl...       5   50\n",
       "4  This shirt is very flattering to all due to th...       5   47\n",
       "5  I love tracy reese dresses, but this one is no...       2   49\n",
       "6  I aded this in my basket at hte last mintue to...       5   39"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Create a new dataframe called 'df1'\n",
    "df2 = df_clean[['Review_Text' , 'Rating','Age']].copy()\n",
    "df2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Ignore all reviews with a rating of 3. A rating of 3 is considered a neutral rating.\n",
    "df2= df2[df2['Rating'] != 3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>I love, love, love this jumpsuit. it's fun, fl...</td>\n",
       "      <td>True</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>This shirt is very flattering to all due to th...</td>\n",
       "      <td>True</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>I love tracy reese dresses, but this one is no...</td>\n",
       "      <td>False</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>I aded this in my basket at hte last mintue to...</td>\n",
       "      <td>True</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>I ordered this in carbon for store pick up, an...</td>\n",
       "      <td>True</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>I love this dress. i usually get an xs but it ...</td>\n",
       "      <td>True</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>I'm 5\"5' and 125 lbs. i ordered the s petite t...</td>\n",
       "      <td>True</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>More and more i find myself reliant on the rev...</td>\n",
       "      <td>True</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Bought the black xs to go under the larkspur m...</td>\n",
       "      <td>True</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>I took these out of the package and wanted the...</td>\n",
       "      <td>True</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Review_Text  Rating  Age\n",
       "3   I love, love, love this jumpsuit. it's fun, fl...    True   50\n",
       "4   This shirt is very flattering to all due to th...    True   47\n",
       "5   I love tracy reese dresses, but this one is no...   False   49\n",
       "6   I aded this in my basket at hte last mintue to...    True   39\n",
       "7   I ordered this in carbon for store pick up, an...    True   39\n",
       "8   I love this dress. i usually get an xs but it ...    True   24\n",
       "9   I'm 5\"5' and 125 lbs. i ordered the s petite t...    True   34\n",
       "12  More and more i find myself reliant on the rev...    True   53\n",
       "13  Bought the black xs to go under the larkspur m...    True   44\n",
       "15  I took these out of the package and wanted the...    True   47"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Rating over 3 is considered a positive rating and rating under 3 is a negative rating\n",
    "df2['Rating'] = df2['Rating'] >=4\n",
    "\n",
    "df2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 17198 entries, 3 to 23485\n",
      "Data columns (total 3 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   Review_Text  17198 non-null  object\n",
      " 1   Rating       17198 non-null  bool  \n",
      " 2   Age          17198 non-null  int64 \n",
      "dtypes: bool(1), int64(1), object(1)\n",
      "memory usage: 419.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Change True values to Positive and False values to Negative\n",
    "df2['Rating'] = df2['Rating'].replace({True : 'Positive'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>I love, love, love this jumpsuit. it's fun, fl...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>This shirt is very flattering to all due to th...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>I love tracy reese dresses, but this one is no...</td>\n",
       "      <td>Negative</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>I aded this in my basket at hte last mintue to...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>I ordered this in carbon for store pick up, an...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>I love this dress. i usually get an xs but it ...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>I'm 5\"5' and 125 lbs. i ordered the s petite t...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>More and more i find myself reliant on the rev...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Bought the black xs to go under the larkspur m...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>I took these out of the package and wanted the...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Review_Text    Rating  Age\n",
       "3   I love, love, love this jumpsuit. it's fun, fl...  Positive   50\n",
       "4   This shirt is very flattering to all due to th...  Positive   47\n",
       "5   I love tracy reese dresses, but this one is no...  Negative   49\n",
       "6   I aded this in my basket at hte last mintue to...  Positive   39\n",
       "7   I ordered this in carbon for store pick up, an...  Positive   39\n",
       "8   I love this dress. i usually get an xs but it ...  Positive   24\n",
       "9   I'm 5\"5' and 125 lbs. i ordered the s petite t...  Positive   34\n",
       "12  More and more i find myself reliant on the rev...  Positive   53\n",
       "13  Bought the black xs to go under the larkspur m...  Positive   44\n",
       "15  I took these out of the package and wanted the...  Positive   47"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2['Rating'] = df2['Rating'].replace({False : 'Negative'})\n",
    "df2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['review_pos']=np.nan\n",
    "review_pos=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3        I love, love, love this jumpsuit. it's fun, fl...\n",
       "4        This shirt is very flattering to all due to th...\n",
       "5        I love tracy reese dresses, but this one is no...\n",
       "6        I aded this in my basket at hte last mintue to...\n",
       "7        I ordered this in carbon for store pick up, an...\n",
       "                               ...                        \n",
       "23477    I'm so impressed with the beautiful color comb...\n",
       "23478    I was surprised at the positive reviews for th...\n",
       "23479    So i wasn't sure about ordering this skirt bec...\n",
       "23481    I was very happy to snag this dress at such a ...\n",
       "23485    This dress in a lovely platinum is feminine an...\n",
       "Name: Review_Text, Length: 17198, dtype: string"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2['Review_Text'].astype(dtype='string')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to C:\\Users\\Patrick\n",
      "[nltk_data]     Carpenter\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "nltk.download('vader_lexicon')\n",
    "sia = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let’s see how the overall sentiment is using the sentiment we generated.\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "# Pie chart\n",
    "labels = ['Positive','Negative' ]\n",
    "sizes = df2['Rating'].value_counts()\n",
    "#colors\n",
    "colors = ['#ADFF2F','#5F9EA0']\n",
    "#explsion\n",
    "explode = (0.05,0.05)\n",
    " \n",
    "plt.pie(sizes, colors = colors, labels=labels, autopct='%1.1f%%', startangle=90, pctdistance=0.85, explode = explode)\n",
    "#draw circle\n",
    "centre_circle = plt.Circle((0,0),0.70,fc='white')\n",
    "fig = plt.gcf()\n",
    "fig.gca().add_artist(centre_circle)\n",
    "#Adjusts chart size\n",
    "sns.set(rc={'figure.figsize':(16, 8)})\n",
    "plt.title('Piechart of Positive and Negative Reviews') \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review_Text</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Age</th>\n",
       "      <th>review_pos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>I love, love, love this jumpsuit. it's fun, fl...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>This shirt is very flattering to all due to th...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>47</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>I love tracy reese dresses, but this one is no...</td>\n",
       "      <td>Negative</td>\n",
       "      <td>49</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>I aded this in my basket at hte last mintue to...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>39</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>I ordered this in carbon for store pick up, an...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>39</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Review_Text    Rating  Age  \\\n",
       "3  I love, love, love this jumpsuit. it's fun, fl...  Positive   50   \n",
       "4  This shirt is very flattering to all due to th...  Positive   47   \n",
       "5  I love tracy reese dresses, but this one is no...  Negative   49   \n",
       "6  I aded this in my basket at hte last mintue to...  Positive   39   \n",
       "7  I ordered this in carbon for store pick up, an...  Positive   39   \n",
       "\n",
       "   review_pos  \n",
       "3         NaN  \n",
       "4         NaN  \n",
       "5         NaN  \n",
       "6         NaN  \n",
       "7         NaN  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in df2.index:\n",
    "    if type(df2['Review_Text'][i])==str:\n",
    "        review_pos.append((sia.polarity_scores(df2['Review_Text'][i])['pos']))\n",
    "    else:\n",
    "        review_pos.append(np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['review_pos']=review_pos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Split Data into training and test set\n",
    "y = df2.Rating\n",
    "X = df2[['review_pos','Age']]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=53)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8831923890063424\n",
      "[[5013    0]\n",
      " [ 663    0]]\n"
     ]
    }
   ],
   "source": [
    "# Instantiate a Multinomial Naive Bayes classifier: nb_classifier\n",
    "nb_classifier = MultinomialNB()\n",
    "\n",
    "# Fit the classifier to the training data\n",
    "nb_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Create the predicted tags: pred\n",
    "pred = nb_classifier.predict(X_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(score)\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "cm = metrics.confusion_matrix(y_test, pred, labels=['Positive', 'Negative'])\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8706835799859056\n",
      "[[4842  171]\n",
      " [ 563  100]]\n"
     ]
    }
   ],
   "source": [
    "knn_classifier = KNeighborsClassifier()\n",
    "# Fit the classifier to the training data\n",
    "knn_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Create the predicted tags: pred\n",
    "pred = knn_classifier.predict(X_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(score)\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "knn_cm = metrics.confusion_matrix(y_test, pred, labels=['Positive', 'Negative'])\n",
    "print(knn_cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8553558844256519\n",
      "[[4700  313]\n",
      " [ 508  155]]\n"
     ]
    }
   ],
   "source": [
    "rf_classifier = RandomForestClassifier()\n",
    "\n",
    "# Fit the classifier to the training data\n",
    "rf_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Create the predicted tags: pred\n",
    "pred = rf_classifier.predict(X_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(score)\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "rf_cm = metrics.confusion_matrix(y_test, pred, labels=['Positive', 'Negative'])\n",
    "print(rf_cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8828400281888654\n",
      "[[5010    3]\n",
      " [ 662    1]]\n"
     ]
    }
   ],
   "source": [
    "sgd_classifier = SGDClassifier()\n",
    "\n",
    "# Fit the classifier to the training data\n",
    "sgd_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Create the predicted tags: pred\n",
    "pred = sgd_classifier.predict(X_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(score)\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "sgd_cm = metrics.confusion_matrix(y_test, pred, labels=['Positive', 'Negative'])\n",
    "print(sgd_cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8109584214235377\n",
      "[[4402  611]\n",
      " [ 462  201]]\n"
     ]
    }
   ],
   "source": [
    "tree_classifier = DecisionTreeClassifier()\n",
    "\n",
    "# Fit the classifier to the training data\n",
    "tree_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Create the predicted tags: pred\n",
    "pred = tree_classifier.predict(X_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(score)\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "tree_cm = metrics.confusion_matrix(y_test, pred, labels=['Positive', 'Negative'])\n",
    "print(tree_cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.885306553911205\n",
      "[[4991   22]\n",
      " [ 629   34]]\n"
     ]
    }
   ],
   "source": [
    "log_classifier = LogisticRegression()\n",
    "\n",
    "# Fit the classifier to the training data\n",
    "log_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Create the predicted tags: pred\n",
    "pred = log_classifier.predict(X_test)\n",
    "\n",
    "# Calculate the accuracy score: score\n",
    "score = metrics.accuracy_score(y_test, pred)\n",
    "print(score)\n",
    "\n",
    "# Calculate the confusion matrix: cm\n",
    "log_cm = metrics.confusion_matrix(y_test, pred, labels=['Positive', 'Negative'])\n",
    "print(log_cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(cm, classes, normalize=False,title='Confusion matrix', cmap=plt.cm.Blues):\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    thresh = cm.max() / 2.\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(cm, classes=['Positive', 'Negative'])\n",
    "# metrics.plot_confusion_matrix(nb_classifier, X_test, y_test)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6663     This jacket is far more attractive than on the...\n",
       "19183    I feel like this brand is very good at coming ...\n",
       "12516    This is a love at first sight item! bought tha...\n",
       "11218    I just received them (blue) and wore them toda...\n",
       "10053    As you can tell from the pictures, it's nothin...\n",
       "Name: Review_Text, dtype: object"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
